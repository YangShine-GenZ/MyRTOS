<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\MyRTOS.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\MyRTOS.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Fri Dec 08 22:51:45 2023
<BR><P>
<H3>Maximum Stack Usage =        104 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
task1 &rArr; tTimerStop &rArr; tSemWait &rArr; tEventWait &rArr; tTimeTaskWait
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[a]">Interrupt0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">Interrupt0_Handler</a><BR>
 <LI><a href="#[b]">Interrupt1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">Interrupt1_Handler</a><BR>
 <LI><a href="#[c]">Interrupt2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">Interrupt2_Handler</a><BR>
 <LI><a href="#[d]">Interrupt3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">Interrupt3_Handler</a><BR>
 <LI><a href="#[e]">Interrupt4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">Interrupt4_Handler</a><BR>
 <LI><a href="#[f]">Interrupt5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">Interrupt5_Handler</a><BR>
 <LI><a href="#[10]">Interrupt6_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">Interrupt6_Handler</a><BR>
 <LI><a href="#[11]">Interrupt7_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">Interrupt7_Handler</a><BR>
 <LI><a href="#[12]">Interrupt8_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">Interrupt8_Handler</a><BR>
 <LI><a href="#[13]">Interrupt9_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">Interrupt9_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4]">BusFault_Handler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[a]">Interrupt0_Handler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[b]">Interrupt1_Handler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[c]">Interrupt2_Handler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[d]">Interrupt3_Handler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[e]">Interrupt4_Handler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[f]">Interrupt5_Handler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[10]">Interrupt6_Handler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[11]">Interrupt7_Handler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[12]">Interrupt8_Handler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[13]">Interrupt9_Handler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from switch.o(.emb_text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from time.o(i.SysTick_Handler) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[15]">SystemInit</a> from system_armcm3.o(i.SystemInit) referenced from startup_armcm3.o(.text)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_armcm3.o(.text) referenced from startup_armcm3.o(RESET)
 <LI><a href="#[16]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_armcm3.o(.text)
 <LI><a href="#[14]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[1c]">tTimerSoftTask</a> from stimer.o(i.tTimerSoftTask) referenced from stimer.o(i.tTimerModuleInit)
 <LI><a href="#[17]">task1</a> from main.o(i.task1) referenced from main.o(i.main)
 <LI><a href="#[18]">task2</a> from main.o(i.task2) referenced from main.o(i.main)
 <LI><a href="#[19]">task3</a> from main.o(i.task3) referenced from main.o(i.main)
 <LI><a href="#[1a]">task4</a> from main.o(i.task4) referenced from main.o(i.main)
 <LI><a href="#[1b]">taskIdle</a> from main.o(i.taskIdle) referenced from main.o(i.main)
 <LI><a href="#[1d]">timerFunc</a> from main.o(i.timerFunc) referenced from main.o(i.task1)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[16]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(.text)
</UL>
<P><STRONG><a name="[4e]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[1e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[20]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4f]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[50]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[51]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[52]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[53]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[54]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, switch.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>Interrupt0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>Interrupt1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>Interrupt2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>Interrupt3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>Interrupt4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>Interrupt5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>Interrupt6_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt6_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt6_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>Interrupt7_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt7_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt7_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>Interrupt8_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt8_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt8_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>Interrupt9_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt9_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt9_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[55]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, time.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SysTick_Handler &rArr; tTaskSystemTickHandler &rArr; tTimerModuleTickNotify &rArr; tSemNotify &rArr; tEventWake &rArr; tTimeTaskWakeUp &rArr; tTimeTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskSystemTickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SystemInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system_armcm3.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm3.o(.text)
</UL>
<P><STRONG><a name="[56]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[57]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[58]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[14]"></a>main</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = main &rArr; tTimerModuleInit &rArr; tSemInit &rArr; tEventInit
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTimerModuleInit
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskSchedInit
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskRunFirst
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskInit
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskHighestReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[46]"></a>tBitmapClear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tbitmap.o(i.tBitmapClear))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskSchedUnRdy
</UL>

<P><STRONG><a name="[28]"></a>tBitmapCount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tbitmap.o(i.tBitmapCount))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tBitmapGetFirstSet
</UL>

<P><STRONG><a name="[27]"></a>tBitmapGetFirstSet</STRONG> (Thumb, 86 bytes, Stack size 4 bytes, tbitmap.o(i.tBitmapGetFirstSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tBitmapGetFirstSet
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tBitmapCount
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskHighestReady
</UL>

<P><STRONG><a name="[45]"></a>tBitmapInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tbitmap.o(i.tBitmapInit))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskSchedInit
</UL>

<P><STRONG><a name="[42]"></a>tBitmapSet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tbitmap.o(i.tBitmapSet))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskSchedRdy
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskInit
</UL>

<P><STRONG><a name="[29]"></a>tEventInit</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, event.o(i.tEventInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tEventInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tSemInit
</UL>

<P><STRONG><a name="[2b]"></a>tEventRemoveTask</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, event.o(i.tEventRemoveTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tEventRemoveTask
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tListRemove
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskExitCritical
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskSystemTickHandler
</UL>

<P><STRONG><a name="[2f]"></a>tEventWait</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, event.o(i.tEventWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tEventWait &rArr; tTimeTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTimeTaskWait
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskSchedUnRdy
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tListAddLast
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskExitCritical
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tSemWait
</UL>

<P><STRONG><a name="[33]"></a>tEventWaitCount</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, event.o(i.tEventWaitCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tEventWaitCount
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tListCount
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskExitCritical
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tSemNotify
</UL>

<P><STRONG><a name="[35]"></a>tEventWake</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, event.o(i.tEventWake))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tEventWake &rArr; tTimeTaskWakeUp &rArr; tTimeTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTimeTaskWakeUp
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskSchedRdy
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tListRemoveFirst
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskExitCritical
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tSemNotify
</UL>

<P><STRONG><a name="[41]"></a>tListAddFirst</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tnode.o(i.tListAddFirst))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskInit
</UL>

<P><STRONG><a name="[31]"></a>tListAddLast</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tnode.o(i.tListAddLast))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tEventWait
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTimeTaskWait
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskSchedRdy
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskSystemTickHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTimerStart
</UL>

<P><STRONG><a name="[34]"></a>tListCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tnode.o(i.tListCount))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tEventWaitCount
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskSchedUnRdy
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskSystemTickHandler
</UL>

<P><STRONG><a name="[3f]"></a>tListFirst</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tnode.o(i.tListFirst))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskHighestReady
</UL>

<P><STRONG><a name="[2a]"></a>tListInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tnode.o(i.tListInit))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tEventInit
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskDelayedInit
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTimerModuleInit
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskSchedInit
</UL>

<P><STRONG><a name="[2d]"></a>tListRemove</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tnode.o(i.tListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTimerCallFuncList
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTimeTaskRemove
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskSchedUnRdy
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tEventRemoveTask
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTimerStop
</UL>

<P><STRONG><a name="[36]"></a>tListRemoveFirst</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tnode.o(i.tListRemoveFirst))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tEventWake
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskSystemTickHandler
</UL>

<P><STRONG><a name="[40]"></a>tNodeInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tnode.o(i.tNodeInit))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTimerInit
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskInit
</UL>

<P><STRONG><a name="[39]"></a>tSemInit</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sem.o(i.tSemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tSemInit &rArr; tEventInit
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tEventInit
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTimerModuleInit
</UL>

<P><STRONG><a name="[3a]"></a>tSemNotify</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, sem.o(i.tSemNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tSemNotify &rArr; tEventWake &rArr; tTimeTaskWakeUp &rArr; tTimeTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tEventWake
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tEventWaitCount
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskExitCritical
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskEnterCritical
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskSched
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTimerSoftTask
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTimerModuleTickNotify
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTimerStop
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTimerStart
</UL>

<P><STRONG><a name="[3c]"></a>tSemWait</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sem.o(i.tSemWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tSemWait &rArr; tEventWait &rArr; tTimeTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tEventWait
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskExitCritical
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskEnterCritical
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskSched
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTimerSoftTask
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTimerStop
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTimerStart
</UL>

<P><STRONG><a name="[4d]"></a>tSetSysTickPeriod</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, time.o(i.tSetSysTickPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tSetSysTickPeriod
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task1
</UL>

<P><STRONG><a name="[3d]"></a>tTaskDelay</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, time.o(i.tTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = tTaskDelay &rArr; tTaskSched &rArr; tTaskHighestReady &rArr; tBitmapGetFirstSet
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTimeTaskWait
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskSchedUnRdy
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskExitCritical
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskEnterCritical
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskSched
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task4
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task3
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task2
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task1
</UL>

<P><STRONG><a name="[3e]"></a>tTaskDelayedInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, switch.o(i.tTaskDelayedInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tTaskDelayedInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskSchedInit
</UL>

<P><STRONG><a name="[2c]"></a>tTaskEnterCritical</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, primask.o(i.tTaskEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tEventWake
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tEventWaitCount
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tEventWait
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tSemWait
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tSemNotify
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTimerModuleTickNotify
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tEventRemoveTask
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskSystemTickHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskSched
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTimerStop
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTimerStart
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskDelay
</UL>

<P><STRONG><a name="[2e]"></a>tTaskExitCritical</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, primask.o(i.tTaskExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tEventWake
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tEventWaitCount
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tEventWait
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tSemWait
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tSemNotify
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTimerModuleTickNotify
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tEventRemoveTask
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskSystemTickHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskSched
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTimerStop
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTimerStart
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskDelay
</UL>

<P><STRONG><a name="[25]"></a>tTaskHighestReady</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, switch.o(i.tTaskHighestReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tTaskHighestReady &rArr; tBitmapGetFirstSet
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tListFirst
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tBitmapGetFirstSet
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskSched
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24]"></a>tTaskInit</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, switch.o(i.tTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tTaskInit
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tNodeInit
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tListAddFirst
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tBitmapSet
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTimerModuleInit
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26]"></a>tTaskRunFirst</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, switch.o(i.tTaskRunFirst))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b]"></a>tTaskSched</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, switch.o(i.tTaskSched))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tTaskSched &rArr; tTaskHighestReady &rArr; tBitmapGetFirstSet
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskExitCritical
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskEnterCritical
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskSwitch
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskHighestReady
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tSemWait
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tSemNotify
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskSystemTickHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskDelay
</UL>

<P><STRONG><a name="[22]"></a>tTaskSchedInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, switch.o(i.tTaskSchedInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tTaskSchedInit &rArr; tTaskDelayedInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tListInit
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tBitmapInit
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskSchedLockInit
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskDelayedInit
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44]"></a>tTaskSchedLockInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, switch.o(i.tTaskSchedLockInit))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskSchedInit
</UL>

<P><STRONG><a name="[38]"></a>tTaskSchedRdy</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, state.o(i.tTaskSchedRdy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tTaskSchedRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tListAddLast
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tBitmapSet
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tEventWake
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskSystemTickHandler
</UL>

<P><STRONG><a name="[30]"></a>tTaskSchedUnRdy</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, state.o(i.tTaskSchedUnRdy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tTaskSchedUnRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tListRemove
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tBitmapClear
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tListCount
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tEventWait
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskDelay
</UL>

<P><STRONG><a name="[43]"></a>tTaskSwitch</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, switch.o(i.tTaskSwitch))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskSched
</UL>

<P><STRONG><a name="[21]"></a>tTaskSystemTickHandler</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, time.o(i.tTaskSystemTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tTaskSystemTickHandler &rArr; tTimerModuleTickNotify &rArr; tSemNotify &rArr; tEventWake &rArr; tTimeTaskWakeUp &rArr; tTimeTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTimerModuleTickNotify
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTimeTaskWakeUp
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskSchedRdy
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tListRemoveFirst
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tListCount
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tListAddLast
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tEventRemoveTask
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskExitCritical
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskEnterCritical
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskSched
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[48]"></a>tTimeTaskRemove</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, state.o(i.tTimeTaskRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tTimeTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTimeTaskWakeUp
</UL>

<P><STRONG><a name="[32]"></a>tTimeTaskWait</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, state.o(i.tTimeTaskWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tTimeTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tListAddLast
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tEventWait
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskDelay
</UL>

<P><STRONG><a name="[37]"></a>tTimeTaskWakeUp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, state.o(i.tTimeTaskWakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tTimeTaskWakeUp &rArr; tTimeTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTimeTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tEventWake
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskSystemTickHandler
</UL>

<P><STRONG><a name="[4a]"></a>tTimerInit</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, stimer.o(i.tTimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tTimerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tNodeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task1
</UL>

<P><STRONG><a name="[23]"></a>tTimerModuleInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stimer.o(i.tTimerModuleInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tTimerModuleInit &rArr; tSemInit &rArr; tEventInit
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tSemInit
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tListInit
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskInit
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47]"></a>tTimerModuleTickNotify</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stimer.o(i.tTimerModuleTickNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tTimerModuleTickNotify &rArr; tSemNotify &rArr; tEventWake &rArr; tTimeTaskWakeUp &rArr; tTimeTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tSemNotify
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTimerCallFuncList
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskExitCritical
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskSystemTickHandler
</UL>

<P><STRONG><a name="[4b]"></a>tTimerStart</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stimer.o(i.tTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tTimerStart &rArr; tSemWait &rArr; tEventWait &rArr; tTimeTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tSemWait
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tSemNotify
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tListAddLast
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskExitCritical
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task1
</UL>

<P><STRONG><a name="[4c]"></a>tTimerStop</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stimer.o(i.tTimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tTimerStop &rArr; tSemWait &rArr; tEventWait &rArr; tTimeTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tSemWait
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tSemNotify
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tListRemove
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskExitCritical
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task1
</UL>

<P><STRONG><a name="[17]"></a>task1</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, main.o(i.task1))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = task1 &rArr; tTimerStop &rArr; tSemWait &rArr; tEventWait &rArr; tTimeTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTimerStop
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTimerStart
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTimerInit
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskDelay
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tSetSysTickPeriod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[18]"></a>task2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.task2))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = task2 &rArr; tTaskDelay &rArr; tTaskSched &rArr; tTaskHighestReady &rArr; tBitmapGetFirstSet
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[19]"></a>task3</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.task3))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = task3 &rArr; tTaskDelay &rArr; tTaskSched &rArr; tTaskHighestReady &rArr; tBitmapGetFirstSet
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[1a]"></a>task4</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.task4))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = task4 &rArr; tTaskDelay &rArr; tTaskSched &rArr; tTaskHighestReady &rArr; tBitmapGetFirstSet
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[1b]"></a>taskIdle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.taskIdle))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[1d]"></a>timerFunc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.timerFunc))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.task1)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[49]"></a>tTimerCallFuncList</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stimer.o(i.tTimerCallFuncList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tTimerCallFuncList
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTimerSoftTask
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTimerModuleTickNotify
</UL>

<P><STRONG><a name="[1c]"></a>tTimerSoftTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stimer.o(i.tTimerSoftTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tTimerSoftTask &rArr; tSemWait &rArr; tEventWait &rArr; tTimeTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tSemWait
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tSemNotify
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tTimerCallFuncList
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stimer.o(i.tTimerModuleInit)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
